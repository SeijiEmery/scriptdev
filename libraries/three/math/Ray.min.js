THREE={REVISION:"71"};"object"===typeof module&&(module.exports=THREE);void 0===Math.sign&&(Math.sign=function(a){return 0>a?-1:0<a?1:+a});THREE.log=function(){console.log.apply(console,arguments)};THREE.warn=function(){console.warn.apply(console,arguments)};THREE.error=function(){console.error.apply(console,arguments)};THREE.MOUSE={LEFT:0,MIDDLE:1,RIGHT:2};THREE.CullFaceNone=0;THREE.CullFaceBack=1;THREE.CullFaceFront=2;THREE.CullFaceFrontBack=3;THREE.FrontFaceDirectionCW=0;
THREE.FrontFaceDirectionCCW=1;THREE.BasicShadowMap=0;THREE.PCFShadowMap=1;THREE.PCFSoftShadowMap=2;THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;THREE.NormalBlending=1;THREE.AdditiveBlending=2;THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;
THREE.MinEquation=103;THREE.MaxEquation=104;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=300;THREE.CubeReflectionMapping=301;THREE.CubeRefractionMapping=302;
THREE.EquirectangularReflectionMapping=303;THREE.EquirectangularRefractionMapping=304;THREE.SphericalReflectionMapping=305;THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;THREE.NearestMipMapLinearFilter=1005;THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;THREE.LinearMipMapLinearFilter=1008;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;
THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.HalfFloatType=1025;THREE.UnsignedShort4444Type=1016;THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;THREE.LuminanceAlphaFormat=1023;THREE.RGBEFormat=THREE.RGBAFormat;THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;THREE.RGBA_S3TC_DXT3_Format=2003;
THREE.RGBA_S3TC_DXT5_Format=2004;THREE.RGB_PVRTC_4BPPV1_Format=2100;THREE.RGB_PVRTC_2BPPV1_Format=2101;THREE.RGBA_PVRTC_4BPPV1_Format=2102;THREE.RGBA_PVRTC_2BPPV1_Format=2103;
THREE.Projector=function(){THREE.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");this.projectVector=function(a,d){THREE.warn("THREE.Projector: .projectVector() is now vector.project().");a.project(d)};this.unprojectVector=function(a,d){THREE.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");a.unproject(d)};this.pickingRay=function(a,d){THREE.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}};
THREE.CanvasRenderer=function(){THREE.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");this.domElement=document.createElement("canvas");this.clear=function(){};this.render=function(){};this.setClearColor=function(){};this.setSize=function(){}};THREE.Ray=function(a,d){this.origin=void 0!==a?a:new THREE.Vector3;this.direction=void 0!==d?d:new THREE.Vector3};
THREE.Ray.prototype={constructor:THREE.Ray,set:function(a,d){this.origin.copy(a);this.direction.copy(d);return this},copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,d){return(d||new THREE.Vector3).copy(this.direction).multiplyScalar(a).add(this.origin)},recast:function(){var a=new THREE.Vector3;return function(d){this.origin.copy(this.at(d,a));return this}}(),closestPointToPoint:function(a,d){var e=d||new THREE.Vector3;e.subVectors(a,this.origin);
var b=e.dot(this.direction);return 0>b?e.copy(this.origin):e.copy(this.direction).multiplyScalar(b).add(this.origin)},distanceToPoint:function(){var a=new THREE.Vector3;return function(d){var e=a.subVectors(d,this.origin).dot(this.direction);if(0>e)return this.origin.distanceTo(d);a.copy(this.direction).multiplyScalar(e).add(this.origin);return a.distanceTo(d)}}(),distanceSqToSegment:function(){var a=new THREE.Vector3,d=new THREE.Vector3,e=new THREE.Vector3;return function(b,c,g,k){a.copy(b).add(c).multiplyScalar(0.5);
d.copy(c).sub(b).normalize();e.copy(this.origin).sub(a);var f=0.5*b.distanceTo(c),h=-this.direction.dot(d),m=e.dot(this.direction),l=-e.dot(d),n=e.lengthSq(),q=Math.abs(1-h*h),p;0<q?(b=h*l-m,c=h*m-l,p=f*q,0<=b?c>=-p?c<=p?(f=1/q,b*=f,c*=f,h=b*(b+h*c+2*m)+c*(h*b+c+2*l)+n):(c=f,b=Math.max(0,-(h*c+m)),h=-b*b+c*(c+2*l)+n):(c=-f,b=Math.max(0,-(h*c+m)),h=-b*b+c*(c+2*l)+n):c<=-p?(b=Math.max(0,-(-h*f+m)),c=0<b?-f:Math.min(Math.max(-f,-l),f),h=-b*b+c*(c+2*l)+n):c<=p?(b=0,c=Math.min(Math.max(-f,-l),f),h=c*(c+
2*l)+n):(b=Math.max(0,-(h*f+m)),c=0<b?f:Math.min(Math.max(-f,-l),f),h=-b*b+c*(c+2*l)+n)):(c=0<h?-f:f,b=Math.max(0,-(h*c+m)),h=-b*b+c*(c+2*l)+n);g&&g.copy(this.direction).multiplyScalar(b).add(this.origin);k&&k.copy(d).multiplyScalar(c).add(a);return h}}(),isIntersectionSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},intersectSphere:function(){var a=new THREE.Vector3;return function(d,e){a.subVectors(d.center,this.origin);var b=a.dot(this.direction),c=a.dot(a)-b*b,g=d.radius*d.radius;
if(c>g)return null;g=Math.sqrt(g-c);c=b-g;b+=g;return 0>c&&0>b?null:0>c?this.at(b,e):this.at(c,e)}}(),isIntersectionPlane:function(a){var d=a.distanceToPoint(this.origin);return 0===d||0>a.normal.dot(this.direction)*d?!0:!1},distanceToPlane:function(a){var d=a.normal.dot(this.direction);if(0==d)return 0==a.distanceToPoint(this.origin)?0:null;a=-(this.origin.dot(a.normal)+a.constant)/d;return 0<=a?a:null},intersectPlane:function(a,d){var e=this.distanceToPlane(a);return null===e?null:this.at(e,d)},
isIntersectionBox:function(){var a=new THREE.Vector3;return function(d){return null!==this.intersectBox(d,a)}}(),intersectBox:function(a,d){var e,b,c,g,k;b=1/this.direction.x;g=1/this.direction.y;k=1/this.direction.z;var f=this.origin;0<=b?(e=(a.min.x-f.x)*b,b*=a.max.x-f.x):(e=(a.max.x-f.x)*b,b*=a.min.x-f.x);0<=g?(c=(a.min.y-f.y)*g,g*=a.max.y-f.y):(c=(a.max.y-f.y)*g,g*=a.min.y-f.y);if(e>g||c>b)return null;if(c>e||e!==e)e=c;if(g<b||b!==b)b=g;0<=k?(c=(a.min.z-f.z)*k,k*=a.max.z-f.z):(c=(a.max.z-f.z)*
k,k*=a.min.z-f.z);if(e>k||c>b)return null;if(c>e||e!==e)e=c;if(k<b||b!==b)b=k;return 0>b?null:this.at(0<=e?e:b,d)},intersectTriangle:function(){var a=new THREE.Vector3,d=new THREE.Vector3,e=new THREE.Vector3,b=new THREE.Vector3;return function(c,g,k,f,h){d.subVectors(g,c);e.subVectors(k,c);b.crossVectors(d,e);g=this.direction.dot(b);if(0<g){if(f)return null;f=1}else if(0>g)f=-1,g=-g;else return null;a.subVectors(this.origin,c);c=f*this.direction.dot(e.crossVectors(a,e));if(0>c)return null;k=f*this.direction.dot(d.cross(a));
if(0>k||c+k>g)return null;c=-f*a.dot(b);return 0>c?null:this.at(c/g,h)}}(),applyMatrix4:function(a){this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);this.direction.sub(this.origin);this.direction.normalize();return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)},clone:function(){return(new THREE.Ray).copy(this)}};
